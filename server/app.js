const express = require('express')
const cors = require('cors')
const cookieParser = require('cookie-parser')
require('dotenv').config()
const http = require('http');
const router=require('./routers/main')
const path = require('path');
const axios=require('axios')

const { createTables } = require('./config/create-tables');

const app = express()

const port = 3000

let corsOptions = {
    origin: [
        'http://localhost:5173',
        'http://192.168.0.105:5173'
    ],
    credentials:true
}
app.use(cookieParser())
app.use(cors(corsOptions))
app.use(express.json())
app.use('/', router)
app.use('/photos', express.static(path.join(__dirname, './photos')));

const server=http.createServer(app)

require('./websocket')(server,corsOptions)

const start=async() => {
    await createTables()
    server.listen(port, '0.0.0.0', () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });
}


// async function askDeepSeek(_, message) {
//     const parsedMessage = JSON.parse(message);
  
//     const previousMessages = JSON.stringify(
//       parsedMessage.previous_messages,
//       null,
//       2
//     );
//     const newMessage = JSON.stringify(parsedMessage.new_message, null, 2);
  
//     const response = await axios.post(
//       "http://localhost:11434/api/generate",
//       {
//         model: "deepseek-r1:7b",
//         prompt: configurePrompt(previousMessages, newMessage),
//       },
//       {
//         headers: { "Content-Type": "application/json" },
//         responseType: "stream",
//       }
//     );
  
//     const stream = response.data;
//     let fullResponse = "";
  
//     stream.on("data", (data) => {
//       const dataString = data.toString();
//       try {
//         const jsonData = JSON.parse(dataString);
//         fullResponse += jsonData.response;
//         process.stdout.write("\x1Bc");
//         console.log(fullResponse);
//       } catch (e) {}
//     });
//   }

//   const configurePrompt = (previousMessages, newMessage) => {
//     return `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
//     –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –ø–æ 3 –∫–ª—é—á–µ–≤—ã–º –∞—Å–ø–µ–∫—Ç–∞–º:
//     1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
//     2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
//     3. –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å
  
//   üîπ **–¢–≤–æ—è –∑–∞–¥–∞—á–∞:**  
//   - –û—Ü–µ–Ω–∏ **–∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** (0-100), –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–∞—Ä—ã.  
//   - –û—Ü–µ–Ω–∏ **–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏** (0-100) –ø–æ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è, –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ —Ä–µ–∞–∫—Ü–∏–∏. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å–∞–π—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤  
//   - **–£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å –ø—Ä–æ—à–ª—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
  
//     ***–ï—Å–ª–∏ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏—à—å —Ö–æ—Ç—å –∫–∞–∫–æ–π —Ç–æ –Ω–∞–º—ë–∫ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —à–∞–Ω—Ç–∞–∂ –∏–ª–∏ —É–≥—Ä–æ–∑—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ 
//     –∏–ª–∏ –∂–µ —É–≥—Ä–æ–∑—É –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤–Ω–µ —Å–µ—Ç–∏ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å 0***


//   ‚ùå **–ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è! –¢–æ–ª—å–∫–æ JSON-–æ—Ç–≤–µ—Ç.**  
//   ‚úÖ **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û JSON, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∏–º!):**  
//   \`\`\`json
//   {
//     "message_score": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
//     "compatibility": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
//   }
//   \`\`\`
  
//   üîπ **–ü—Ä–∏–º–µ—Ä:**  
//   **–°–æ–æ–±—â–µ–Ω–∏–µ:** "–ü—Ä–∏–≤–µ—Ç, –º–∞–ª—ã—à–∫–∞."  
//   ‚úÖ **–û—Ç–≤–µ—Ç:**
//   \`\`\`json
//   {
//     "message_score": 50,
//     "compatibility": 20
//   }
//   \`\`\`
  
//   üìå **–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—É—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –≤ –∞–Ω–∞–ª–∏–∑–µ, –≤–∫–ª—é—á–∞—è –æ—Ü–µ–Ω–∫–∏ –∏ –≥–µ–Ω–¥–µ—Ä):**  
//   \`\`\`json
//   ${previousMessages}
//   \`\`\`
  
//   üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**  
//   \`\`\`json
//   ${newMessage}
//   \`\`\`
  
//   üëâ **–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –±–µ–∑ think!**`;
//   };

// askDeepSeek(
//     `assess message using established rules.`,
//     `{
//         "previous_messages": [
//             {
//                 "message": "–ü—Ä–∏–≤–µ—Ç!",
//                 "options": {
//                     "message_score": 50,
//                     "compatibility": 20,
//                     "gender": "male"
//                 }
//             },
//             {
//                 "message": "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫!",
//                 "options": {
//                     "message_score": 60,
//                     "compatibility": 40,
//                     "gender": "female"
//                 }
//             },
//             {
//                 "message": "–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∫ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å?",
//                 "options": {
//                     "message_score": 75,
//                     "compatibility": 90,
//                     "gender": "male"
//                 }
//             }
//         ],
//         "new_message": {
//             "message": "–û–æ–æ, —Å–ø–∞—Å–∏–±–∫–∏, —Ç—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π. –õ—é–±–ª—é",
//             "options": {"gender": "female"}
//         }
//     }`
// );


start()